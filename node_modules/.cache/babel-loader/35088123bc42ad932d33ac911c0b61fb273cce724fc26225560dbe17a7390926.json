{"ast":null,"code":"import axios from 'axios';\nimport ElementUI from \"element-ui\";\naxios.defaults.withCredentials = true; //表示请求可以携带cookie\n\nconst request = axios.create({\n  baseURL: \"http://localhost:9001\",\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//     let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\n//     if (user) {\n//         config.headers['token'] = user.token;  // 设置请求头\n//     }\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n\n//response 拦截器\n//可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return Promise.resolve(res);\n  }\n  if (response.status == 0 || response.status == 200) {\n    return Promise.resolve(res);\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  //当权限验证不通过的时候给出提示\n  if (res.code == '401') {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n  }\n  return Promise.resolve(res);\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","ElementUI","defaults","withCredentials","request","create","baseURL","timeout","interceptors","response","use","res","data","config","responseType","Promise","resolve","status","JSON","parse","code","Message","message","msg","type","error","console","log","reject"],"sources":["D:/Work/front-vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios';\r\nimport ElementUI from \"element-ui\";\r\n\r\naxios.defaults.withCredentials = true; //表示请求可以携带cookie\r\n\r\nconst request = axios.create({\r\n\tbaseURL: \"http://localhost:9001\",\r\n\ttimeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\n// request.interceptors.request.use(config => {\r\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n//     let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\r\n//     if (user) {\r\n//         config.headers['token'] = user.token;  // 设置请求头\r\n//     }\r\n//     return config\r\n// }, error => {\r\n//     return Promise.reject(error)\r\n// });\r\n\r\n//response 拦截器\r\n//可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return Promise.resolve(res);\r\n        }\r\n        if (response.status == 0 || response.status == 200) {\r\n            return Promise.resolve(res);\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        //当权限验证不通过的时候给出提示\r\n        if (res.code == '401') {\r\n            ElementUI.Message({\r\n                message: res.msg,\r\n                type: 'error'\r\n            });\r\n        }\r\n        return Promise.resolve(res);\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n\r\n\r\nexport default request\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElCD,KAAK,CAACE,QAAQ,CAACC,eAAe,GAAG,IAAI,CAAC,CAAC;;AAEvC,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC5BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAH,OAAO,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7BD,QAAQ,IAAI;EACR,IAAIE,GAAG,GAAGF,QAAQ,CAACG,IAAI;EACvB;EACA,IAAIH,QAAQ,CAACI,MAAM,CAACC,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOC,OAAO,CAACC,OAAO,CAACL,GAAG,CAAC;EAC/B;EACA,IAAIF,QAAQ,CAACQ,MAAM,IAAI,CAAC,IAAIR,QAAQ,CAACQ,MAAM,IAAI,GAAG,EAAE;IAChD,OAAOF,OAAO,CAACC,OAAO,CAACL,GAAG,CAAC;EAC/B;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGO,IAAI,CAACC,KAAK,CAACR,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA;EACA,IAAIA,GAAG,CAACS,IAAI,IAAI,KAAK,EAAE;IACnBnB,SAAS,CAACoB,OAAO,CAAC;MACdC,OAAO,EAAEX,GAAG,CAACY,GAAG;MAChBC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA,OAAOT,OAAO,CAACC,OAAO,CAACL,GAAG,CAAC;AAC/B,CAAC,EACDc,KAAK,IAAI;EACLC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC,EAAC;EAC3B,OAAOV,OAAO,CAACa,MAAM,CAACH,KAAK,CAAC;AAChC,CAAC,CACJ;AAGD,eAAerB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}